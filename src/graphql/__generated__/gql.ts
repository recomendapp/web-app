/* eslint-disable */
import * as types from './graphql';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 */
const documents = {
    "\n  query GetFeed(\n    $filter: user_movie_activityFilter!\n    $orderBy: [user_movie_activityOrderBy!]!\n    $first: Int!\n    $after: Cursor!\n    $locale: String!\n  ) {\n    user_movie_activityCollection(\n      filter: $filter\n      orderBy: $orderBy\n      first: $first\n      after: $after\n    ) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        endCursor\n      }\n      edges {\n        cursor\n        node {\n          ...UserMovieActivity\n        }\n      }\n    }\n  }\n  \n": types.GetFeedDocument,
    "\n  fragment TmdbCollection on tmdb_collection {\n    id\n    backdrop_path\n    data: tmdb_collection_translationCollection(\n      filter: { language: { eq: $locale } }\n      first: 1\n    ) {\n      edges {\n        node {\n          ...TmdbCollectionTranslation\n        }\n      }\n    }\n  }\n  \n": types.TmdbCollectionFragmentDoc,
    "\n  fragment TmdbCollectionTranslation on tmdb_collection_translation {\n    name\n    overview\n    poster_path\n  }\n": types.TmdbCollectionTranslationFragmentDoc,
    "\n  fragment TmdbCountry on tmdb_country {\n    iso_3166_1\n    data: tmdb_country_translationCollection(\n      filter: { iso_3166_1: { eq: $locale } }\n      first: 1\n    ) {\n      edges {\n        node {\n          ...TmdbCountryTranslation\n        }\n      }\n    }\n  }\n  \n": types.TmdbCountryFragmentDoc,
    "\n  fragment TmdbCountryTranslation on tmdb_country_translation {\n    name\n  }\n": types.TmdbCountryTranslationFragmentDoc,
    "\n  fragment TmdbGender on tmdb_gender {\n    id\n    data: tmdb_gender_translationCollection(\n      filter: { language: { eq: $locale } }\n      first: 1\n    ) {\n      edges {\n        node {\n          ...TmdbGenderTranslation\n        }\n      }\n    }\n  }\n  \n": types.TmdbGenderFragmentDoc,
    "\n  fragment TmdbGenderTranslation on tmdb_gender_translation {\n    name\n  }\n": types.TmdbGenderTranslationFragmentDoc,
    "\n  fragment TmdbGenre on tmdb_genre {\n    id\n    data: tmdb_genre_translationCollection(\n      filter: { language: { eq: $locale } }\n      first: 1\n    ) {\n      edges {\n        node {\n          ...TmdbGenreTranslation\n        }\n      }\n    }\n  }\n  \n": types.TmdbGenreFragmentDoc,
    "\n  fragment TmdbGenreTranslation on tmdb_genre_translation {\n    name\n  }\n": types.TmdbGenreTranslationFragmentDoc,
    "\n  fragment TmdbLanguage on tmdb_language {\n    iso_639_1\n    name_in_native_language\n    data: tmdb_language_translationCollection(\n      filter: { language: { eq: $locale } }\n      first: 1\n    ) {\n      edges {\n        node {\n          ...TmdbLanguageTranslation\n        }\n      }\n    }\n  }\n  \n": types.TmdbLanguageFragmentDoc,
    "\n  fragment TmdbLanguageTranslation on tmdb_language_translation {\n    name\n  }\n": types.TmdbLanguageTranslationFragmentDoc,
    "\n  fragment TmdbMovieMinimal on tmdb_movie {\n    id\n    adult\n    backdrop_path\n    belongs_to_collection: tmdb_collection {\n      ...TmdbCollection\n    }\n    budget\n    homepage\n    imdb_id\n    original_language\n    original_title\n    popularity\n    release_date\n    revenue\n    runtime\n    status\n    vote_average\n    vote_count\n    data: tmdb_movie_translationCollection(\n      filter: { language_id: { eq: $locale } }\n      first: 1\n    ) {\n      edges {\n        node {\n          ...TmdbMovieTranslation\n        }\n      }\n    }\n    directors: tmdb_movie_creditsCollection(\n      filter: { job: { eq: \"Director\" } }\n    ) {\n      edges {\n        node {\n          ...TmdbMovieCredit\n        }\n      }\n    }\n    genres: tmdb_movie_genreCollection {\n      edges {\n        node {\n          genre_id\n          genre: tmdb_genre {\n            ...TmdbGenre\n          }\n        }\n      }\n    }\n    spoken_languages: tmdb_movie_languageCollection {\n      edges {\n        node {\n          language_id\n          language: tmdb_language {\n            ...TmdbLanguage\n          }\n        }\n      }\n    }\n  }\n  \n  \n  \n  \n  \n": types.TmdbMovieMinimalFragmentDoc,
    "\n  fragment TmdbMovieCredit on tmdb_movie_credits {\n    id\n    department\n    job\n    person: tmdb_person {\n      ...TmdbPerson\n    }\n    role: tmdb_movie_role {\n      ...TmdbMovieRole\n    }\n  }\n  \n  \n": types.TmdbMovieCreditFragmentDoc,
    "\n  fragment TmdbMovie on tmdb_movie {\n    id\n    adult\n    backdrop_path\n    belongs_to_collection: tmdb_collection {\n      ...TmdbCollection\n    }\n    budget\n    homepage\n    imdb_id\n    original_language\n    original_title\n    popularity\n    release_date\n    revenue\n    runtime\n    status\n    vote_average\n    vote_count\n    data: tmdb_movie_translationCollection(\n      filter: { language_id: { eq: $locale } }\n      first: 1\n    ) {\n      edges {\n        node {\n          ...TmdbMovieTranslation\n        }\n      }\n    }\n    directors: tmdb_movie_creditsCollection(\n      filter: { job: { eq: \"Director\" } }\n    ) {\n      edges {\n        node {\n          ...TmdbMovieCredit\n        }\n      }\n    }\n    cast: tmdb_movie_creditsCollection(\n      filter: { department: { eq: \"Acting\" } }\n    ) {\n      edges {\n        node {\n          ...TmdbMovieCredit\n        }\n      }\n    }\n    crew: tmdb_movie_creditsCollection(\n      filter: { department: { neq: \"Acting\" } }\n    ) {\n      edges {\n        node {\n          ...TmdbMovieCredit\n        }\n      }\n    }\n    genres: tmdb_movie_genreCollection {\n      edges {\n        node {\n          genre_id\n          genre: tmdb_genre {\n            ...TmdbGenre\n          }\n        }\n      }\n    }\n    production_countries: tmdb_movie_countryCollection {\n      edges {\n        node {\n          country_id\n          country: tmdb_country {\n            ...TmdbCountry\n          }\n        }\n      }\n    }\n    spoken_languages: tmdb_movie_languageCollection {\n      edges {\n        node {\n          language_id\n          language: tmdb_language {\n            ...TmdbLanguage\n          }\n        }\n      }\n    }\n    videos: tmdb_movie_videosCollection(\n      filter: { iso_639_1: { eq: $locale } }\n    ) {\n      edges {\n        node {\n          ...TmdbMovieVideo\n        }\n      }\n    }\n  }\n  \n  \n  \n  \n  \n  \n  \n": types.TmdbMovieFragmentDoc,
    "\n  fragment TmdbMovieRole on tmdb_movie_role {\n    credit_id\n    character\n    order\n  }\n": types.TmdbMovieRoleFragmentDoc,
    "\n  fragment TmdbMovieTranslation on tmdb_movie_translation {\n    title\n    overview\n    poster_path\n    tagline\n  }\n": types.TmdbMovieTranslationFragmentDoc,
    "\n  fragment TmdbMovieVideo on tmdb_movie_videos {\n    name\n    key\n    site\n    size\n    type\n    official\n  }\n": types.TmdbMovieVideoFragmentDoc,
    "\n  fragment TmdbPerson on tmdb_person {\n    id\n    adult\n    also_known_as\n    birthday\n    deathday\n    gender: tmdb_gender {\n      ...TmdbGender\n    }\n    homepage\n    imdb_id\n    known_for_department\n    name\n    place_of_birth\n    popularity\n    profile_path\n  }\n  \n": types.TmdbPersonFragmentDoc,
    "\n  query GetMovieById($filter: tmdb_movieFilter, $locale: String) {\n    tmdb_movieCollection(filter: $filter) {\n      edges {\n        node {\n          ...TmdbMovie\n        }\n      }\n    }\n  }\n  \n": types.GetMovieByIdDocument,
    "\n  query GetMovieByIdMinimal($filter: tmdb_movieFilter, $locale: String) {\n    tmdb_movieCollection(filter: $filter) {\n      edges {\n        node {\n          ...TmdbMovie\n        }\n      }\n    }\n  }\n  \n": types.GetMovieByIdMinimalDocument,
    "\n  query GetMovieCasting($movieId: BigInt!, $first: Int!, $after: Cursor!, $locale: String!) {\n    tmdb_movie_creditsCollection(\n\t\tfilter: {\n\t\t\tmovie_id: { eq: $movieId }\n\t\t\tjob: { eq: \"Actor\" }\n\t\t}\n\t\tfirst: $first,\n\t\tafter: $after\n\t) {\n\t\tpageInfo {\n\t\t\thasNextPage\n\t\t\thasPreviousPage\n\t\t\tendCursor\n\t\t}\n      \tedges {\n\t\t\tnode {\n\t\t\t\t...TmdbMovieCredit\n\t\t\t}\n      \t}\n    }\n  }\n  \n": types.GetMovieCastingDocument,
    "\n  fragment TmdbPersonMinimal on tmdb_person {\n    id\n    name\n    profile_path\n    known_for_department\n  }\n": types.TmdbPersonMinimalFragmentDoc,
    "\n  query GetPersonById($filter: tmdb_personFilter, $locale: String) {\n    tmdb_personCollection(filter: $filter) {\n      edges {\n        node {\n          ...TmdbPerson\n          credits: tmdb_movie_creditsCollection {\n            edges {\n              node {\n                id\n                movie: tmdb_movie {\n                  ...TmdbMovieMinimal\n                }\n              }\n            }\n          }  \n        }\n      }\n    }\n  }\n  \n  \n": types.GetPersonByIdDocument,
    "\n  fragment Playlist on playlist {\n    id\n    created_at\n    user_id\n    user {\n      ...User\n    }\n    title\n    description\n    is_public\n    poster_url\n    items_count\n    playlist_item: playlist_itemCollection(\n      filter: { playlist_id: { eq: $id } }\n      orderBy: { rank: AscNullsLast }\n    ) {\n      edges {\n        node {\n          ...PlaylistItem\n        }\n      }\n    }\n    guests: playlist_guestCollection(filter: { playlist_id: { eq: $id } }) {\n      edges {\n        node {\n          ...PlaylistGuest\n        }\n      }\n    }\n  }\n  \n  \n  \n": types.PlaylistFragmentDoc,
    "\n  fragment PlaylistMinimal on playlist {\n    id\n    created_at\n    user_id\n    user {\n      ...User\n    }\n    title\n    description\n    is_public\n    poster_url\n    items_count\n    featured\n  }\n  \n": types.PlaylistMinimalFragmentDoc,
    "\n  mutation CreatePlaylist(\n    $id: BigInt!\n    $user_id: UUID!\n    $title: String!\n    $description: String!\n    $is_public: Boolean!\n    $locale: String!\n  ) {\n    insertIntoplaylistCollection(\n      objects: {\n        user_id: $user_id\n        title: $title\n        description: $description\n        is_public: $is_public\n      }\n    ) {\n      records {\n        ...PlaylistMinimal\n      }\n    }\n  }\n  \n": types.CreatePlaylistDocument,
    "\n  mutation DeletePlaylist($id: BigInt!) {\n    deleteFromplaylistCollection(filter: { id: { eq: $id } }) {\n      records {\n        ...PlaylistMinimal\n      }\n    }\n  }\n  \n": types.DeletePlaylistDocument,
    "\n  mutation UpdatePlaylist(\n    $id: BigInt!\n    $title: String!\n    $description: String!\n    $is_public: Boolean!\n    $poster_url: String!\n  ) {\n    updateplaylistCollection(\n      filter: { id: { eq: $id } }\n      set: {\n        title: $title\n        description: $description\n        is_public: $is_public\n        poster_url: $poster_url\n      }\n    ) {\n      records {\n        ...PlaylistMinimal\n      }\n    }\n  }\n  \n": types.UpdatePlaylistDocument,
    "\n  query GetPlaylistById($id: BigInt!, $locale: String!) {\n    playlistCollection(filter: { id: { eq: $id } }) {\n      edges {\n        node {\n          ...Playlist\n        }\n      }\n    }\n  }\n  \n": types.GetPlaylistByIdDocument,
    "\n  query GetPlaylists(\n    $filter: playlistFilter\n    $order: [playlistOrderBy!]\n    $first: Int!\n    $after: Cursor!\n  ) {\n    playlistCollection(\n      filter: $filter\n      orderBy: $order\n      first: $first\n      after: $after\n    ) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        endCursor\n      }\n      edges {\n        cursor\n        node {\n          ...PlaylistMinimal\n        }\n      }\n    }\n  }\n  \n": types.GetPlaylistsDocument,
    "\n  query GetPlaylistsByUserId(\n    $user_id: UUID!\n    $order: [playlistOrderBy!]\n    $first: Int!\n    $after: Cursor!\n  ) {\n    playlistCollection(\n      filter: { user_id: { eq: $user_id } }\n      orderBy: $order\n      first: $first\n      after: $after\n    ) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        endCursor\n      }\n      edges {\n        cursor\n        node {\n          ...PlaylistMinimal\n        }\n      }\n    }\n  }\n  \n": types.GetPlaylistsByUserIdDocument,
    "\n  fragment PlaylistGuest on playlist_guest {\n    id\n    created_at\n    playlist_id\n    user_id\n    user {\n      ...User\n    }\n    edit\n  }\n  \n": types.PlaylistGuestFragmentDoc,
    "\n  mutation DeletePlaylistGuest($playlist_id: BigInt!, $user_id: UUID!) {\n    deleteFromplaylist_guestCollection(\n      filter: { playlist_id: { eq: $playlist_id }, user_id: { eq: $user_id } }\n    ) {\n      records {\n        ...PlaylistGuest\n      }\n    }\n  }\n  \n": types.DeletePlaylistGuestDocument,
    "\n  mutation InsertPlaylistGuest($playlist_id: BigInt!, $user_id: UUID!) {\n    insertIntoplaylist_guestCollection(\n      objects: { playlist_id: $playlist_id, user_id: $user_id }\n    ) {\n      records {\n        ...PlaylistGuest\n      }\n    }\n  }\n  \n": types.InsertPlaylistGuestDocument,
    "\n  mutation UpdatePlaylistGuest(\n    $playlist_id: BigInt!\n    $user_id: UUID!\n    $edit: Boolean!\n  ) {\n    updateplaylist_guestCollection(\n      filter: { playlist_id: { eq: $playlist_id }, user_id: { eq: $user_id } }\n      set: { edit: $edit }\n    ) {\n      records {\n        ...PlaylistGuest\n      }\n    }\n  }\n  \n": types.UpdatePlaylistGuestDocument,
    "\n  fragment PlaylistItem on playlist_item {\n    id\n    created_at\n    playlist_id\n    movie_id\n    movie: tmdb_movie {\n      ...TmdbMovieMinimal\n    }\n    user_id\n    comment\n    rank\n    user {\n      ...User\n    }\n  }\n  \n  \n": types.PlaylistItemFragmentDoc,
    "\n  mutation DeletePlaylistItem(\n    $id: BigInt!\n    $locale: String!\n  ) {\n    deleteFromplaylist_itemCollection(\n      filter: { id: { eq: $id } }\n    ) {\n      records {\n        ...PlaylistItem\n      }\n    }\n  }\n  \n": types.DeletePlaylistItemDocument,
    "\n  mutation InsertPlaylistItem(\n    $playlist_id: BigInt!\n    $movie_id: BigInt!\n    $user_id: UUID!\n    $comment: String\n    $rank: Int!\n    $locale: String!\n  ) {\n    insertIntoplaylist_itemCollection(\n      objects: {\n        playlist_id: $playlist_id\n        movie_id: $movie_id\n        user_id: $user_id\n        comment: $comment\n        rank: $rank\n      }\n    ) {\n      records {\n        ...PlaylistItem\n      }\n    }\n  }\n  \n": types.InsertPlaylistItemDocument,
    "\n  mutation UpdatePlaylistItem(\n    $id: BigInt!\n    $comment: String\n    $rank: Int!\n    $locale: String!\n  ) {\n    updateplaylist_itemCollection(\n      filter: { id: { eq: $id } }\n      set: {\n        comment: $comment\n        rank: $rank\n      }\n    ) {\n      records {\n        ...PlaylistItem\n      }\n    }\n  }\n  \n": types.UpdatePlaylistItemDocument,
    "\n  fragment Price on prices {\n    id\n    product_id\n    active\n    description\n    unit_amount\n    currency\n    type\n    interval\n    interval_count\n    trial_period_days\n    metadata\n    products {\n      ...Product\n    }\n  }\n  \n": types.PriceFragmentDoc,
    "\n  fragment Product on products {\n    id\n    active\n    name\n    description\n    image\n    metadata\n  }\n": types.ProductFragmentDoc,
    "\n  query SearchMovies($filter: tmdb_movie_translationFilter!, $first: Int!, $after: Cursor!, $locale: String!) {\n    tmdb_movie_translationCollection(filter: $filter, first: $first, after: $after, orderBy: {}) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        endCursor\n      }\n      edges {\n        cursor\n        node {\n          id\n          movie: tmdb_movie {\n            ...TmdbMovieMinimal\n          }\n        }\n      }\n    }\n  }\n  \n": types.SearchMoviesDocument,
    "\n  query SearchPersons($filter: tmdb_personFilter!, $first: Int!, $after: Cursor!) {\n    tmdb_personCollection(filter: $filter, first: $first, after: $after) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        endCursor\n      }\n      edges {\n        cursor\n        node {\n          ...TmdbPersonMinimal\n        }\n      }\n    }\n  }\n  \n": types.SearchPersonsDocument,
    "\n  query SearchPlaylists(\n    $id: BigInt!\n    $search: String\n    $order: [playlistOrderBy!]\n    $first: Int!\n    $after: Cursor!\n  ) {\n    playlistCollection(\n      filter: { title: { iregex: $search } }\n      orderBy: $order\n      first: $first\n      after: $after\n    ) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        endCursor\n      }\n      edges {\n        cursor\n        node {\n          ...PlaylistMinimal\n        }\n      }\n    }\n  }\n  \n": types.SearchPlaylistsDocument,
    "\n  query SearchUsers($filter: userFilter!, $first: Int!, $after: Cursor!) {\n    userCollection(filter: $filter, first: $first, after: $after) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        endCursor\n      }\n      edges {\n        cursor\n        node {\n          ...User\n        }\n      }\n    }\n  }\n  \n": types.SearchUsersDocument,
    "\n  query GetUserFriends($user_id: UUID!) {\n    user_friendCollection(filter: { user_id: { eq: $user_id } }) {\n      edges {\n        node {\n          friend_id\n          friend: user {\n            ...UserMinimal\n          }\n        }\n      }\n    }\n  }\n  \n": types.GetUserFriendsDocument,
    "\n  fragment UserMovieActivity on user_movie_activity {\n    id\n    created_at\n    updated_at\n    user_id\n    user {\n      ...User\n    }\n    is_liked\n    rating\n    date\n    movie_id\n    movie: tmdb_movie {\n      ...TmdbMovieMinimal\n    }\n    review: user_movie_review {\n      ...UserMovieReview\n    }\n  }\n  \n  \n  \n": types.UserMovieActivityFragmentDoc,
    "\n  fragment UserMovieActivityMinimal on user_movie_activity {\n    id\n    created_at\n    updated_at\n    user_id\n    user {\n      ...User\n    }\n    is_liked\n    rating\n    date\n    movie_id\n    review: user_movie_review {\n      id\n    }\n  }\n  \n  \n": types.UserMovieActivityMinimalFragmentDoc,
    "\n  mutation DeleteUserMovieActivity($movie_id: BigInt!, $user_id: UUID!) {\n    deleteFromuser_movie_activityCollection(\n      filter: { movie_id: { eq: $movie_id }, user_id: { eq: $user_id } }\n    ) {\n      records {\n        ...UserMovieActivityMinimal\n      }\n    }\n  }\n  \n": types.DeleteUserMovieActivityDocument,
    "\n  mutation InsertUserMovieActivity(\n    $movie_id: BigInt!\n    $user_id: UUID!\n    $is_liked: Boolean\n    $rating: Int\n    $date: Datetime\n  ) {\n    insertIntouser_movie_activityCollection(\n      objects: {\n        movie_id: $movie_id\n        user_id: $user_id\n        is_liked: $is_liked\n        rating: $rating\n        date: $date\n      }\n    ) {\n      records {\n        ...UserMovieActivityMinimal\n      }\n    }\n  }\n  \n": types.InsertUserMovieActivityDocument,
    "\n  mutation UpdateUserMovieActivity(\n    $id: BigInt!\n    $movie_id: BigInt!\n    $user_id: UUID!\n    $is_liked: Boolean\n    $rating: Int\n    $date: Datetime\n  ) {\n    updateuser_movie_activityCollection(\n      filter: { id: { eq: $id } }\n      set: {\n        movie_id: $movie_id\n        user_id: $user_id\n        is_liked: $is_liked\n        rating: $rating\n        date: $date\n      }\n    ) {\n      records {\n        ...UserMovieActivityMinimal\n      }\n    }\n  }\n  \n": types.UpdateUserMovieActivityDocument,
    "\n  query GetUserMovieActivitiesByUserId(\n    $filter: user_movie_activityFilter,\n    $orderBy: [user_movie_activityOrderBy!],\n    $first: Int!,\n    $after: Cursor!\n    $locale: String!\n  ) {\n    user_movie_activityCollection(\n      filter: $filter\n      orderBy: $orderBy\n    ) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          ...UserMovieActivity\n        }\n      }\n    }\n  }\n  \n": types.GetUserMovieActivitiesByUserIdDocument,
    "\n  query GetUserMovieActivity($filter: user_movie_activityFilter, $orderBy: [user_movie_activityOrderBy!], $locale: String!) {\n    user_movie_activityCollection(\n      filter: $filter\n      orderBy: $orderBy\n    ) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          ...UserMovieActivity\n        }\n      }\n    }\n  }\n  \n": types.GetUserMovieActivityDocument,
    "\n  query GetUserMovieActivityByMovieId($user_id: UUID!, $movie_id: BigInt!) {\n    user_movie_activityCollection(\n      filter: { user_id: { eq: $user_id }, movie_id: { eq: $movie_id } }\n    ) {\n      edges {\n        node {\n          ...UserMovieActivityMinimal\n        }\n      }\n    }\n  }\n  \n": types.GetUserMovieActivityByMovieIdDocument,
    "\n  fragment UserMovieGuidelist on user_movie_guidelist {\n    id\n    created_at\n    movie_id\n    movie: tmdb_movie {\n      ...TmdbMovieMinimal\n    }\n    comment\n    sender_user: user {\n      ...User\n    }\n  }\n  \n  \n": types.UserMovieGuidelistFragmentDoc,
    "\n  mutation DeleteUserMovieGuidelist($id: BigInt!, $locale: String!) {\n    deleteFromuser_movie_guidelistCollection(filter: { id: { eq: $id } }) {\n      records {\n        ...UserMovieGuidelist\n      }\n    }\n  }\n  \n": types.DeleteUserMovieGuidelistDocument,
    "\n  mutation InsertUserMovieGuidelist(\n    $movie_id: BigInt!\n    $receiver_user_id: UUID!\n    $sender_user_id: UUID!\n    $comment: String\n    $locale: String!\n  ) {\n    insertIntouser_movie_guidelistCollection(\n      objects: {\n        movie_id: $movie_id\n        receiver_user_id: $receiver_user_id\n        sender_user_id: $sender_user_id\n        comment: $comment\n      }\n    ) {\n      records {\n        ...UserMovieGuidelist\n      }\n    }\n  }\n  \n": types.InsertUserMovieGuidelistDocument,
    "\n  query GetUserMovieGuidelistByUserId($user_id: UUID!, $locale: String!) {\n    user_movie_guidelistCollection(\n      filter: { receiver_user_id: { eq: $user_id } }\n    ) {\n      edges {\n        node {\n          ...UserMovieGuidelist\n        }\n      }\n    }\n  }\n  \n": types.GetUserMovieGuidelistByUserIdDocument,
    "\n  mutation DeleteReview($id: BigInt!) {\n    deleteFromuser_movie_reviewCollection(filter: { id: { eq: $id } }) {\n      records {\n        ...UserMovieReview\n      }\n    }\n  }\n  \n": types.DeleteReviewDocument,
    "\n  mutation InsertReview(\n    $movie_id: BigInt!\n    $user_id: UUID!\n    $title: String!\n    $body: String!\n  ) {\n    insertIntouser_movie_reviewCollection(\n      objects: {\n        movie_id: $movie_id\n        user_id: $user_id\n        title: $title\n        body: $body\n      }\n    ) {\n      records {\n        ...UserMovieReview\n      }\n    }\n  }\n  \n": types.InsertReviewDocument,
    "\n  mutation UpdateReview($id: BigInt!, $title: String!, $body: String!) {\n    updateuser_movie_reviewCollection(\n      filter: { id: { eq: $id } }\n      set: { title: $title, body: $body }\n    ) {\n      records {\n        ...UserMovieReview\n      }\n    }\n  }\n  \n": types.UpdateReviewDocument,
    "\n  fragment UserMovieReview on user_movie_review {\n    id\n    created_at\n    updated_at\n    user_id\n    user {\n      ...UserMinimal\n    }\n    movie_id\n    title\n    body\n    likes_count\n    comments_count\n    views_count\n  }\n  \n": types.UserMovieReviewFragmentDoc,
    "\n\tquery GetUserMovieReview(\n\t\t$filter: user_movie_reviewFilter!\n\t) {\n\t\tuser_movie_reviewCollection {\n\t\t\tedges {\n\t\t\t\tnode {\n\t\t\t\t\t...UserMovieReview\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n": types.GetUserMovieReviewDocument,
    "\n  fragment UserMovieWatchlist on user_movie_watchlist {\n    id\n    created_at\n    user_id\n    movie_id\n    movie: tmdb_movie {\n      ...TmdbMovieMinimal\n    }\n  }\n  \n": types.UserMovieWatchlistFragmentDoc,
    "\n  fragment UserMovieWatchlistMinimal on user_movie_watchlist {\n    id\n    created_at\n    user_id\n    movie_id\n  }\n": types.UserMovieWatchlistMinimalFragmentDoc,
    "\n  mutation DeleteUserMovieWatchlist($movie_id: BigInt!, $user_id: UUID!) {\n    deleteFromuser_movie_watchlistCollection(\n      filter: { movie_id: { eq: $movie_id }, user_id: { eq: $user_id } }\n    ) {\n      records {\n        ...UserMovieWatchlistMinimal\n      }\n    }\n  }\n  \n": types.DeleteUserMovieWatchlistDocument,
    "\n  mutation InsertUserMovieWatchlist($movie_id: BigInt!, $user_id: UUID!) {\n    insertIntouser_movie_watchlistCollection(\n      objects: { movie_id: $movie_id, user_id: $user_id }\n    ) {\n      records {\n        ...UserMovieWatchlistMinimal\n      }\n    }\n  }\n  \n": types.InsertUserMovieWatchlistDocument,
    "\n  query GetUserMovieWatchlistByMovieId($user_id: UUID!, $movie_id: BigInt!) {\n    user_movie_watchlistCollection(\n      filter: { user_id: { eq: $user_id }, movie_id: { eq: $movie_id } }\n    ) {\n      edges {\n        node {\n          ...UserMovieWatchlistMinimal\n        }\n      }\n    }\n  }\n  \n": types.GetUserMovieWatchlistByMovieIdDocument,
    "\n  query GetUserMovieWatchlistByUserId($user_id: UUID!, $locale: String!) {\n    user_movie_watchlistCollection(\n      filter: {\n        user_id: { eq: $user_id }\n      }\n    ) {\n      edges {\n        node {\n          ...UserMovieWatchlist\n        }\n      }\n    }\n  }\n  \n": types.GetUserMovieWatchlistByUserIdDocument,
    "\n  fragment Subscription on subscriptions {\n    id\n    user_id\n    status\n    prices {\n      ...Price\n    }\n  }\n  \n": types.SubscriptionFragmentDoc,
    "\n  fragment User on user {\n    id\n    updated_at\n    username\n    username_updated_at\n    full_name\n    bio\n    avatar_url\n    background_url\n    website\n    language\n    favorite_color\n    followers_count\n    following_count\n    friends_count\n    subscriptions: subscriptionsCollection(filter: { status: { eq: active } }) {\n      edges {\n        node {\n          ...Subscription\n        }\n      }\n    }\n  }\n  \n": types.UserFragmentDoc,
    "\n  fragment UserMinimal on user {\n    id\n    username\n    full_name\n    bio\n    avatar_url\n    background_url\n    language\n    subscriptions: subscriptionsCollection(filter: { status: { eq: active } }) {\n      edges {\n        node {\n          ...Subscription\n        }\n      }\n    }\n  }\n  \n": types.UserMinimalFragmentDoc,
    "\n  query GetUserById($userId: UUID!) {\n    userCollection(filter: { id: { eq: $userId } }, last: 1) {\n      edges {\n        user: node {\n          ...User\n        }\n      }\n    }\n  }\n  \n": types.GetUserByIdDocument,
};

/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = gql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function gql(source: string): unknown;

/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetFeed(\n    $filter: user_movie_activityFilter!\n    $orderBy: [user_movie_activityOrderBy!]!\n    $first: Int!\n    $after: Cursor!\n    $locale: String!\n  ) {\n    user_movie_activityCollection(\n      filter: $filter\n      orderBy: $orderBy\n      first: $first\n      after: $after\n    ) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        endCursor\n      }\n      edges {\n        cursor\n        node {\n          ...UserMovieActivity\n        }\n      }\n    }\n  }\n  \n"): (typeof documents)["\n  query GetFeed(\n    $filter: user_movie_activityFilter!\n    $orderBy: [user_movie_activityOrderBy!]!\n    $first: Int!\n    $after: Cursor!\n    $locale: String!\n  ) {\n    user_movie_activityCollection(\n      filter: $filter\n      orderBy: $orderBy\n      first: $first\n      after: $after\n    ) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        endCursor\n      }\n      edges {\n        cursor\n        node {\n          ...UserMovieActivity\n        }\n      }\n    }\n  }\n  \n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment TmdbCollection on tmdb_collection {\n    id\n    backdrop_path\n    data: tmdb_collection_translationCollection(\n      filter: { language: { eq: $locale } }\n      first: 1\n    ) {\n      edges {\n        node {\n          ...TmdbCollectionTranslation\n        }\n      }\n    }\n  }\n  \n"): (typeof documents)["\n  fragment TmdbCollection on tmdb_collection {\n    id\n    backdrop_path\n    data: tmdb_collection_translationCollection(\n      filter: { language: { eq: $locale } }\n      first: 1\n    ) {\n      edges {\n        node {\n          ...TmdbCollectionTranslation\n        }\n      }\n    }\n  }\n  \n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment TmdbCollectionTranslation on tmdb_collection_translation {\n    name\n    overview\n    poster_path\n  }\n"): (typeof documents)["\n  fragment TmdbCollectionTranslation on tmdb_collection_translation {\n    name\n    overview\n    poster_path\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment TmdbCountry on tmdb_country {\n    iso_3166_1\n    data: tmdb_country_translationCollection(\n      filter: { iso_3166_1: { eq: $locale } }\n      first: 1\n    ) {\n      edges {\n        node {\n          ...TmdbCountryTranslation\n        }\n      }\n    }\n  }\n  \n"): (typeof documents)["\n  fragment TmdbCountry on tmdb_country {\n    iso_3166_1\n    data: tmdb_country_translationCollection(\n      filter: { iso_3166_1: { eq: $locale } }\n      first: 1\n    ) {\n      edges {\n        node {\n          ...TmdbCountryTranslation\n        }\n      }\n    }\n  }\n  \n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment TmdbCountryTranslation on tmdb_country_translation {\n    name\n  }\n"): (typeof documents)["\n  fragment TmdbCountryTranslation on tmdb_country_translation {\n    name\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment TmdbGender on tmdb_gender {\n    id\n    data: tmdb_gender_translationCollection(\n      filter: { language: { eq: $locale } }\n      first: 1\n    ) {\n      edges {\n        node {\n          ...TmdbGenderTranslation\n        }\n      }\n    }\n  }\n  \n"): (typeof documents)["\n  fragment TmdbGender on tmdb_gender {\n    id\n    data: tmdb_gender_translationCollection(\n      filter: { language: { eq: $locale } }\n      first: 1\n    ) {\n      edges {\n        node {\n          ...TmdbGenderTranslation\n        }\n      }\n    }\n  }\n  \n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment TmdbGenderTranslation on tmdb_gender_translation {\n    name\n  }\n"): (typeof documents)["\n  fragment TmdbGenderTranslation on tmdb_gender_translation {\n    name\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment TmdbGenre on tmdb_genre {\n    id\n    data: tmdb_genre_translationCollection(\n      filter: { language: { eq: $locale } }\n      first: 1\n    ) {\n      edges {\n        node {\n          ...TmdbGenreTranslation\n        }\n      }\n    }\n  }\n  \n"): (typeof documents)["\n  fragment TmdbGenre on tmdb_genre {\n    id\n    data: tmdb_genre_translationCollection(\n      filter: { language: { eq: $locale } }\n      first: 1\n    ) {\n      edges {\n        node {\n          ...TmdbGenreTranslation\n        }\n      }\n    }\n  }\n  \n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment TmdbGenreTranslation on tmdb_genre_translation {\n    name\n  }\n"): (typeof documents)["\n  fragment TmdbGenreTranslation on tmdb_genre_translation {\n    name\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment TmdbLanguage on tmdb_language {\n    iso_639_1\n    name_in_native_language\n    data: tmdb_language_translationCollection(\n      filter: { language: { eq: $locale } }\n      first: 1\n    ) {\n      edges {\n        node {\n          ...TmdbLanguageTranslation\n        }\n      }\n    }\n  }\n  \n"): (typeof documents)["\n  fragment TmdbLanguage on tmdb_language {\n    iso_639_1\n    name_in_native_language\n    data: tmdb_language_translationCollection(\n      filter: { language: { eq: $locale } }\n      first: 1\n    ) {\n      edges {\n        node {\n          ...TmdbLanguageTranslation\n        }\n      }\n    }\n  }\n  \n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment TmdbLanguageTranslation on tmdb_language_translation {\n    name\n  }\n"): (typeof documents)["\n  fragment TmdbLanguageTranslation on tmdb_language_translation {\n    name\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment TmdbMovieMinimal on tmdb_movie {\n    id\n    adult\n    backdrop_path\n    belongs_to_collection: tmdb_collection {\n      ...TmdbCollection\n    }\n    budget\n    homepage\n    imdb_id\n    original_language\n    original_title\n    popularity\n    release_date\n    revenue\n    runtime\n    status\n    vote_average\n    vote_count\n    data: tmdb_movie_translationCollection(\n      filter: { language_id: { eq: $locale } }\n      first: 1\n    ) {\n      edges {\n        node {\n          ...TmdbMovieTranslation\n        }\n      }\n    }\n    directors: tmdb_movie_creditsCollection(\n      filter: { job: { eq: \"Director\" } }\n    ) {\n      edges {\n        node {\n          ...TmdbMovieCredit\n        }\n      }\n    }\n    genres: tmdb_movie_genreCollection {\n      edges {\n        node {\n          genre_id\n          genre: tmdb_genre {\n            ...TmdbGenre\n          }\n        }\n      }\n    }\n    spoken_languages: tmdb_movie_languageCollection {\n      edges {\n        node {\n          language_id\n          language: tmdb_language {\n            ...TmdbLanguage\n          }\n        }\n      }\n    }\n  }\n  \n  \n  \n  \n  \n"): (typeof documents)["\n  fragment TmdbMovieMinimal on tmdb_movie {\n    id\n    adult\n    backdrop_path\n    belongs_to_collection: tmdb_collection {\n      ...TmdbCollection\n    }\n    budget\n    homepage\n    imdb_id\n    original_language\n    original_title\n    popularity\n    release_date\n    revenue\n    runtime\n    status\n    vote_average\n    vote_count\n    data: tmdb_movie_translationCollection(\n      filter: { language_id: { eq: $locale } }\n      first: 1\n    ) {\n      edges {\n        node {\n          ...TmdbMovieTranslation\n        }\n      }\n    }\n    directors: tmdb_movie_creditsCollection(\n      filter: { job: { eq: \"Director\" } }\n    ) {\n      edges {\n        node {\n          ...TmdbMovieCredit\n        }\n      }\n    }\n    genres: tmdb_movie_genreCollection {\n      edges {\n        node {\n          genre_id\n          genre: tmdb_genre {\n            ...TmdbGenre\n          }\n        }\n      }\n    }\n    spoken_languages: tmdb_movie_languageCollection {\n      edges {\n        node {\n          language_id\n          language: tmdb_language {\n            ...TmdbLanguage\n          }\n        }\n      }\n    }\n  }\n  \n  \n  \n  \n  \n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment TmdbMovieCredit on tmdb_movie_credits {\n    id\n    department\n    job\n    person: tmdb_person {\n      ...TmdbPerson\n    }\n    role: tmdb_movie_role {\n      ...TmdbMovieRole\n    }\n  }\n  \n  \n"): (typeof documents)["\n  fragment TmdbMovieCredit on tmdb_movie_credits {\n    id\n    department\n    job\n    person: tmdb_person {\n      ...TmdbPerson\n    }\n    role: tmdb_movie_role {\n      ...TmdbMovieRole\n    }\n  }\n  \n  \n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment TmdbMovie on tmdb_movie {\n    id\n    adult\n    backdrop_path\n    belongs_to_collection: tmdb_collection {\n      ...TmdbCollection\n    }\n    budget\n    homepage\n    imdb_id\n    original_language\n    original_title\n    popularity\n    release_date\n    revenue\n    runtime\n    status\n    vote_average\n    vote_count\n    data: tmdb_movie_translationCollection(\n      filter: { language_id: { eq: $locale } }\n      first: 1\n    ) {\n      edges {\n        node {\n          ...TmdbMovieTranslation\n        }\n      }\n    }\n    directors: tmdb_movie_creditsCollection(\n      filter: { job: { eq: \"Director\" } }\n    ) {\n      edges {\n        node {\n          ...TmdbMovieCredit\n        }\n      }\n    }\n    cast: tmdb_movie_creditsCollection(\n      filter: { department: { eq: \"Acting\" } }\n    ) {\n      edges {\n        node {\n          ...TmdbMovieCredit\n        }\n      }\n    }\n    crew: tmdb_movie_creditsCollection(\n      filter: { department: { neq: \"Acting\" } }\n    ) {\n      edges {\n        node {\n          ...TmdbMovieCredit\n        }\n      }\n    }\n    genres: tmdb_movie_genreCollection {\n      edges {\n        node {\n          genre_id\n          genre: tmdb_genre {\n            ...TmdbGenre\n          }\n        }\n      }\n    }\n    production_countries: tmdb_movie_countryCollection {\n      edges {\n        node {\n          country_id\n          country: tmdb_country {\n            ...TmdbCountry\n          }\n        }\n      }\n    }\n    spoken_languages: tmdb_movie_languageCollection {\n      edges {\n        node {\n          language_id\n          language: tmdb_language {\n            ...TmdbLanguage\n          }\n        }\n      }\n    }\n    videos: tmdb_movie_videosCollection(\n      filter: { iso_639_1: { eq: $locale } }\n    ) {\n      edges {\n        node {\n          ...TmdbMovieVideo\n        }\n      }\n    }\n  }\n  \n  \n  \n  \n  \n  \n  \n"): (typeof documents)["\n  fragment TmdbMovie on tmdb_movie {\n    id\n    adult\n    backdrop_path\n    belongs_to_collection: tmdb_collection {\n      ...TmdbCollection\n    }\n    budget\n    homepage\n    imdb_id\n    original_language\n    original_title\n    popularity\n    release_date\n    revenue\n    runtime\n    status\n    vote_average\n    vote_count\n    data: tmdb_movie_translationCollection(\n      filter: { language_id: { eq: $locale } }\n      first: 1\n    ) {\n      edges {\n        node {\n          ...TmdbMovieTranslation\n        }\n      }\n    }\n    directors: tmdb_movie_creditsCollection(\n      filter: { job: { eq: \"Director\" } }\n    ) {\n      edges {\n        node {\n          ...TmdbMovieCredit\n        }\n      }\n    }\n    cast: tmdb_movie_creditsCollection(\n      filter: { department: { eq: \"Acting\" } }\n    ) {\n      edges {\n        node {\n          ...TmdbMovieCredit\n        }\n      }\n    }\n    crew: tmdb_movie_creditsCollection(\n      filter: { department: { neq: \"Acting\" } }\n    ) {\n      edges {\n        node {\n          ...TmdbMovieCredit\n        }\n      }\n    }\n    genres: tmdb_movie_genreCollection {\n      edges {\n        node {\n          genre_id\n          genre: tmdb_genre {\n            ...TmdbGenre\n          }\n        }\n      }\n    }\n    production_countries: tmdb_movie_countryCollection {\n      edges {\n        node {\n          country_id\n          country: tmdb_country {\n            ...TmdbCountry\n          }\n        }\n      }\n    }\n    spoken_languages: tmdb_movie_languageCollection {\n      edges {\n        node {\n          language_id\n          language: tmdb_language {\n            ...TmdbLanguage\n          }\n        }\n      }\n    }\n    videos: tmdb_movie_videosCollection(\n      filter: { iso_639_1: { eq: $locale } }\n    ) {\n      edges {\n        node {\n          ...TmdbMovieVideo\n        }\n      }\n    }\n  }\n  \n  \n  \n  \n  \n  \n  \n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment TmdbMovieRole on tmdb_movie_role {\n    credit_id\n    character\n    order\n  }\n"): (typeof documents)["\n  fragment TmdbMovieRole on tmdb_movie_role {\n    credit_id\n    character\n    order\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment TmdbMovieTranslation on tmdb_movie_translation {\n    title\n    overview\n    poster_path\n    tagline\n  }\n"): (typeof documents)["\n  fragment TmdbMovieTranslation on tmdb_movie_translation {\n    title\n    overview\n    poster_path\n    tagline\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment TmdbMovieVideo on tmdb_movie_videos {\n    name\n    key\n    site\n    size\n    type\n    official\n  }\n"): (typeof documents)["\n  fragment TmdbMovieVideo on tmdb_movie_videos {\n    name\n    key\n    site\n    size\n    type\n    official\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment TmdbPerson on tmdb_person {\n    id\n    adult\n    also_known_as\n    birthday\n    deathday\n    gender: tmdb_gender {\n      ...TmdbGender\n    }\n    homepage\n    imdb_id\n    known_for_department\n    name\n    place_of_birth\n    popularity\n    profile_path\n  }\n  \n"): (typeof documents)["\n  fragment TmdbPerson on tmdb_person {\n    id\n    adult\n    also_known_as\n    birthday\n    deathday\n    gender: tmdb_gender {\n      ...TmdbGender\n    }\n    homepage\n    imdb_id\n    known_for_department\n    name\n    place_of_birth\n    popularity\n    profile_path\n  }\n  \n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetMovieById($filter: tmdb_movieFilter, $locale: String) {\n    tmdb_movieCollection(filter: $filter) {\n      edges {\n        node {\n          ...TmdbMovie\n        }\n      }\n    }\n  }\n  \n"): (typeof documents)["\n  query GetMovieById($filter: tmdb_movieFilter, $locale: String) {\n    tmdb_movieCollection(filter: $filter) {\n      edges {\n        node {\n          ...TmdbMovie\n        }\n      }\n    }\n  }\n  \n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetMovieByIdMinimal($filter: tmdb_movieFilter, $locale: String) {\n    tmdb_movieCollection(filter: $filter) {\n      edges {\n        node {\n          ...TmdbMovie\n        }\n      }\n    }\n  }\n  \n"): (typeof documents)["\n  query GetMovieByIdMinimal($filter: tmdb_movieFilter, $locale: String) {\n    tmdb_movieCollection(filter: $filter) {\n      edges {\n        node {\n          ...TmdbMovie\n        }\n      }\n    }\n  }\n  \n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetMovieCasting($movieId: BigInt!, $first: Int!, $after: Cursor!, $locale: String!) {\n    tmdb_movie_creditsCollection(\n\t\tfilter: {\n\t\t\tmovie_id: { eq: $movieId }\n\t\t\tjob: { eq: \"Actor\" }\n\t\t}\n\t\tfirst: $first,\n\t\tafter: $after\n\t) {\n\t\tpageInfo {\n\t\t\thasNextPage\n\t\t\thasPreviousPage\n\t\t\tendCursor\n\t\t}\n      \tedges {\n\t\t\tnode {\n\t\t\t\t...TmdbMovieCredit\n\t\t\t}\n      \t}\n    }\n  }\n  \n"): (typeof documents)["\n  query GetMovieCasting($movieId: BigInt!, $first: Int!, $after: Cursor!, $locale: String!) {\n    tmdb_movie_creditsCollection(\n\t\tfilter: {\n\t\t\tmovie_id: { eq: $movieId }\n\t\t\tjob: { eq: \"Actor\" }\n\t\t}\n\t\tfirst: $first,\n\t\tafter: $after\n\t) {\n\t\tpageInfo {\n\t\t\thasNextPage\n\t\t\thasPreviousPage\n\t\t\tendCursor\n\t\t}\n      \tedges {\n\t\t\tnode {\n\t\t\t\t...TmdbMovieCredit\n\t\t\t}\n      \t}\n    }\n  }\n  \n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment TmdbPersonMinimal on tmdb_person {\n    id\n    name\n    profile_path\n    known_for_department\n  }\n"): (typeof documents)["\n  fragment TmdbPersonMinimal on tmdb_person {\n    id\n    name\n    profile_path\n    known_for_department\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetPersonById($filter: tmdb_personFilter, $locale: String) {\n    tmdb_personCollection(filter: $filter) {\n      edges {\n        node {\n          ...TmdbPerson\n          credits: tmdb_movie_creditsCollection {\n            edges {\n              node {\n                id\n                movie: tmdb_movie {\n                  ...TmdbMovieMinimal\n                }\n              }\n            }\n          }  \n        }\n      }\n    }\n  }\n  \n  \n"): (typeof documents)["\n  query GetPersonById($filter: tmdb_personFilter, $locale: String) {\n    tmdb_personCollection(filter: $filter) {\n      edges {\n        node {\n          ...TmdbPerson\n          credits: tmdb_movie_creditsCollection {\n            edges {\n              node {\n                id\n                movie: tmdb_movie {\n                  ...TmdbMovieMinimal\n                }\n              }\n            }\n          }  \n        }\n      }\n    }\n  }\n  \n  \n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment Playlist on playlist {\n    id\n    created_at\n    user_id\n    user {\n      ...User\n    }\n    title\n    description\n    is_public\n    poster_url\n    items_count\n    playlist_item: playlist_itemCollection(\n      filter: { playlist_id: { eq: $id } }\n      orderBy: { rank: AscNullsLast }\n    ) {\n      edges {\n        node {\n          ...PlaylistItem\n        }\n      }\n    }\n    guests: playlist_guestCollection(filter: { playlist_id: { eq: $id } }) {\n      edges {\n        node {\n          ...PlaylistGuest\n        }\n      }\n    }\n  }\n  \n  \n  \n"): (typeof documents)["\n  fragment Playlist on playlist {\n    id\n    created_at\n    user_id\n    user {\n      ...User\n    }\n    title\n    description\n    is_public\n    poster_url\n    items_count\n    playlist_item: playlist_itemCollection(\n      filter: { playlist_id: { eq: $id } }\n      orderBy: { rank: AscNullsLast }\n    ) {\n      edges {\n        node {\n          ...PlaylistItem\n        }\n      }\n    }\n    guests: playlist_guestCollection(filter: { playlist_id: { eq: $id } }) {\n      edges {\n        node {\n          ...PlaylistGuest\n        }\n      }\n    }\n  }\n  \n  \n  \n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment PlaylistMinimal on playlist {\n    id\n    created_at\n    user_id\n    user {\n      ...User\n    }\n    title\n    description\n    is_public\n    poster_url\n    items_count\n    featured\n  }\n  \n"): (typeof documents)["\n  fragment PlaylistMinimal on playlist {\n    id\n    created_at\n    user_id\n    user {\n      ...User\n    }\n    title\n    description\n    is_public\n    poster_url\n    items_count\n    featured\n  }\n  \n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation CreatePlaylist(\n    $id: BigInt!\n    $user_id: UUID!\n    $title: String!\n    $description: String!\n    $is_public: Boolean!\n    $locale: String!\n  ) {\n    insertIntoplaylistCollection(\n      objects: {\n        user_id: $user_id\n        title: $title\n        description: $description\n        is_public: $is_public\n      }\n    ) {\n      records {\n        ...PlaylistMinimal\n      }\n    }\n  }\n  \n"): (typeof documents)["\n  mutation CreatePlaylist(\n    $id: BigInt!\n    $user_id: UUID!\n    $title: String!\n    $description: String!\n    $is_public: Boolean!\n    $locale: String!\n  ) {\n    insertIntoplaylistCollection(\n      objects: {\n        user_id: $user_id\n        title: $title\n        description: $description\n        is_public: $is_public\n      }\n    ) {\n      records {\n        ...PlaylistMinimal\n      }\n    }\n  }\n  \n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation DeletePlaylist($id: BigInt!) {\n    deleteFromplaylistCollection(filter: { id: { eq: $id } }) {\n      records {\n        ...PlaylistMinimal\n      }\n    }\n  }\n  \n"): (typeof documents)["\n  mutation DeletePlaylist($id: BigInt!) {\n    deleteFromplaylistCollection(filter: { id: { eq: $id } }) {\n      records {\n        ...PlaylistMinimal\n      }\n    }\n  }\n  \n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation UpdatePlaylist(\n    $id: BigInt!\n    $title: String!\n    $description: String!\n    $is_public: Boolean!\n    $poster_url: String!\n  ) {\n    updateplaylistCollection(\n      filter: { id: { eq: $id } }\n      set: {\n        title: $title\n        description: $description\n        is_public: $is_public\n        poster_url: $poster_url\n      }\n    ) {\n      records {\n        ...PlaylistMinimal\n      }\n    }\n  }\n  \n"): (typeof documents)["\n  mutation UpdatePlaylist(\n    $id: BigInt!\n    $title: String!\n    $description: String!\n    $is_public: Boolean!\n    $poster_url: String!\n  ) {\n    updateplaylistCollection(\n      filter: { id: { eq: $id } }\n      set: {\n        title: $title\n        description: $description\n        is_public: $is_public\n        poster_url: $poster_url\n      }\n    ) {\n      records {\n        ...PlaylistMinimal\n      }\n    }\n  }\n  \n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetPlaylistById($id: BigInt!, $locale: String!) {\n    playlistCollection(filter: { id: { eq: $id } }) {\n      edges {\n        node {\n          ...Playlist\n        }\n      }\n    }\n  }\n  \n"): (typeof documents)["\n  query GetPlaylistById($id: BigInt!, $locale: String!) {\n    playlistCollection(filter: { id: { eq: $id } }) {\n      edges {\n        node {\n          ...Playlist\n        }\n      }\n    }\n  }\n  \n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetPlaylists(\n    $filter: playlistFilter\n    $order: [playlistOrderBy!]\n    $first: Int!\n    $after: Cursor!\n  ) {\n    playlistCollection(\n      filter: $filter\n      orderBy: $order\n      first: $first\n      after: $after\n    ) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        endCursor\n      }\n      edges {\n        cursor\n        node {\n          ...PlaylistMinimal\n        }\n      }\n    }\n  }\n  \n"): (typeof documents)["\n  query GetPlaylists(\n    $filter: playlistFilter\n    $order: [playlistOrderBy!]\n    $first: Int!\n    $after: Cursor!\n  ) {\n    playlistCollection(\n      filter: $filter\n      orderBy: $order\n      first: $first\n      after: $after\n    ) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        endCursor\n      }\n      edges {\n        cursor\n        node {\n          ...PlaylistMinimal\n        }\n      }\n    }\n  }\n  \n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetPlaylistsByUserId(\n    $user_id: UUID!\n    $order: [playlistOrderBy!]\n    $first: Int!\n    $after: Cursor!\n  ) {\n    playlistCollection(\n      filter: { user_id: { eq: $user_id } }\n      orderBy: $order\n      first: $first\n      after: $after\n    ) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        endCursor\n      }\n      edges {\n        cursor\n        node {\n          ...PlaylistMinimal\n        }\n      }\n    }\n  }\n  \n"): (typeof documents)["\n  query GetPlaylistsByUserId(\n    $user_id: UUID!\n    $order: [playlistOrderBy!]\n    $first: Int!\n    $after: Cursor!\n  ) {\n    playlistCollection(\n      filter: { user_id: { eq: $user_id } }\n      orderBy: $order\n      first: $first\n      after: $after\n    ) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        endCursor\n      }\n      edges {\n        cursor\n        node {\n          ...PlaylistMinimal\n        }\n      }\n    }\n  }\n  \n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment PlaylistGuest on playlist_guest {\n    id\n    created_at\n    playlist_id\n    user_id\n    user {\n      ...User\n    }\n    edit\n  }\n  \n"): (typeof documents)["\n  fragment PlaylistGuest on playlist_guest {\n    id\n    created_at\n    playlist_id\n    user_id\n    user {\n      ...User\n    }\n    edit\n  }\n  \n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation DeletePlaylistGuest($playlist_id: BigInt!, $user_id: UUID!) {\n    deleteFromplaylist_guestCollection(\n      filter: { playlist_id: { eq: $playlist_id }, user_id: { eq: $user_id } }\n    ) {\n      records {\n        ...PlaylistGuest\n      }\n    }\n  }\n  \n"): (typeof documents)["\n  mutation DeletePlaylistGuest($playlist_id: BigInt!, $user_id: UUID!) {\n    deleteFromplaylist_guestCollection(\n      filter: { playlist_id: { eq: $playlist_id }, user_id: { eq: $user_id } }\n    ) {\n      records {\n        ...PlaylistGuest\n      }\n    }\n  }\n  \n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation InsertPlaylistGuest($playlist_id: BigInt!, $user_id: UUID!) {\n    insertIntoplaylist_guestCollection(\n      objects: { playlist_id: $playlist_id, user_id: $user_id }\n    ) {\n      records {\n        ...PlaylistGuest\n      }\n    }\n  }\n  \n"): (typeof documents)["\n  mutation InsertPlaylistGuest($playlist_id: BigInt!, $user_id: UUID!) {\n    insertIntoplaylist_guestCollection(\n      objects: { playlist_id: $playlist_id, user_id: $user_id }\n    ) {\n      records {\n        ...PlaylistGuest\n      }\n    }\n  }\n  \n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation UpdatePlaylistGuest(\n    $playlist_id: BigInt!\n    $user_id: UUID!\n    $edit: Boolean!\n  ) {\n    updateplaylist_guestCollection(\n      filter: { playlist_id: { eq: $playlist_id }, user_id: { eq: $user_id } }\n      set: { edit: $edit }\n    ) {\n      records {\n        ...PlaylistGuest\n      }\n    }\n  }\n  \n"): (typeof documents)["\n  mutation UpdatePlaylistGuest(\n    $playlist_id: BigInt!\n    $user_id: UUID!\n    $edit: Boolean!\n  ) {\n    updateplaylist_guestCollection(\n      filter: { playlist_id: { eq: $playlist_id }, user_id: { eq: $user_id } }\n      set: { edit: $edit }\n    ) {\n      records {\n        ...PlaylistGuest\n      }\n    }\n  }\n  \n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment PlaylistItem on playlist_item {\n    id\n    created_at\n    playlist_id\n    movie_id\n    movie: tmdb_movie {\n      ...TmdbMovieMinimal\n    }\n    user_id\n    comment\n    rank\n    user {\n      ...User\n    }\n  }\n  \n  \n"): (typeof documents)["\n  fragment PlaylistItem on playlist_item {\n    id\n    created_at\n    playlist_id\n    movie_id\n    movie: tmdb_movie {\n      ...TmdbMovieMinimal\n    }\n    user_id\n    comment\n    rank\n    user {\n      ...User\n    }\n  }\n  \n  \n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation DeletePlaylistItem(\n    $id: BigInt!\n    $locale: String!\n  ) {\n    deleteFromplaylist_itemCollection(\n      filter: { id: { eq: $id } }\n    ) {\n      records {\n        ...PlaylistItem\n      }\n    }\n  }\n  \n"): (typeof documents)["\n  mutation DeletePlaylistItem(\n    $id: BigInt!\n    $locale: String!\n  ) {\n    deleteFromplaylist_itemCollection(\n      filter: { id: { eq: $id } }\n    ) {\n      records {\n        ...PlaylistItem\n      }\n    }\n  }\n  \n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation InsertPlaylistItem(\n    $playlist_id: BigInt!\n    $movie_id: BigInt!\n    $user_id: UUID!\n    $comment: String\n    $rank: Int!\n    $locale: String!\n  ) {\n    insertIntoplaylist_itemCollection(\n      objects: {\n        playlist_id: $playlist_id\n        movie_id: $movie_id\n        user_id: $user_id\n        comment: $comment\n        rank: $rank\n      }\n    ) {\n      records {\n        ...PlaylistItem\n      }\n    }\n  }\n  \n"): (typeof documents)["\n  mutation InsertPlaylistItem(\n    $playlist_id: BigInt!\n    $movie_id: BigInt!\n    $user_id: UUID!\n    $comment: String\n    $rank: Int!\n    $locale: String!\n  ) {\n    insertIntoplaylist_itemCollection(\n      objects: {\n        playlist_id: $playlist_id\n        movie_id: $movie_id\n        user_id: $user_id\n        comment: $comment\n        rank: $rank\n      }\n    ) {\n      records {\n        ...PlaylistItem\n      }\n    }\n  }\n  \n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation UpdatePlaylistItem(\n    $id: BigInt!\n    $comment: String\n    $rank: Int!\n    $locale: String!\n  ) {\n    updateplaylist_itemCollection(\n      filter: { id: { eq: $id } }\n      set: {\n        comment: $comment\n        rank: $rank\n      }\n    ) {\n      records {\n        ...PlaylistItem\n      }\n    }\n  }\n  \n"): (typeof documents)["\n  mutation UpdatePlaylistItem(\n    $id: BigInt!\n    $comment: String\n    $rank: Int!\n    $locale: String!\n  ) {\n    updateplaylist_itemCollection(\n      filter: { id: { eq: $id } }\n      set: {\n        comment: $comment\n        rank: $rank\n      }\n    ) {\n      records {\n        ...PlaylistItem\n      }\n    }\n  }\n  \n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment Price on prices {\n    id\n    product_id\n    active\n    description\n    unit_amount\n    currency\n    type\n    interval\n    interval_count\n    trial_period_days\n    metadata\n    products {\n      ...Product\n    }\n  }\n  \n"): (typeof documents)["\n  fragment Price on prices {\n    id\n    product_id\n    active\n    description\n    unit_amount\n    currency\n    type\n    interval\n    interval_count\n    trial_period_days\n    metadata\n    products {\n      ...Product\n    }\n  }\n  \n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment Product on products {\n    id\n    active\n    name\n    description\n    image\n    metadata\n  }\n"): (typeof documents)["\n  fragment Product on products {\n    id\n    active\n    name\n    description\n    image\n    metadata\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query SearchMovies($filter: tmdb_movie_translationFilter!, $first: Int!, $after: Cursor!, $locale: String!) {\n    tmdb_movie_translationCollection(filter: $filter, first: $first, after: $after, orderBy: {}) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        endCursor\n      }\n      edges {\n        cursor\n        node {\n          id\n          movie: tmdb_movie {\n            ...TmdbMovieMinimal\n          }\n        }\n      }\n    }\n  }\n  \n"): (typeof documents)["\n  query SearchMovies($filter: tmdb_movie_translationFilter!, $first: Int!, $after: Cursor!, $locale: String!) {\n    tmdb_movie_translationCollection(filter: $filter, first: $first, after: $after, orderBy: {}) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        endCursor\n      }\n      edges {\n        cursor\n        node {\n          id\n          movie: tmdb_movie {\n            ...TmdbMovieMinimal\n          }\n        }\n      }\n    }\n  }\n  \n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query SearchPersons($filter: tmdb_personFilter!, $first: Int!, $after: Cursor!) {\n    tmdb_personCollection(filter: $filter, first: $first, after: $after) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        endCursor\n      }\n      edges {\n        cursor\n        node {\n          ...TmdbPersonMinimal\n        }\n      }\n    }\n  }\n  \n"): (typeof documents)["\n  query SearchPersons($filter: tmdb_personFilter!, $first: Int!, $after: Cursor!) {\n    tmdb_personCollection(filter: $filter, first: $first, after: $after) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        endCursor\n      }\n      edges {\n        cursor\n        node {\n          ...TmdbPersonMinimal\n        }\n      }\n    }\n  }\n  \n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query SearchPlaylists(\n    $id: BigInt!\n    $search: String\n    $order: [playlistOrderBy!]\n    $first: Int!\n    $after: Cursor!\n  ) {\n    playlistCollection(\n      filter: { title: { iregex: $search } }\n      orderBy: $order\n      first: $first\n      after: $after\n    ) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        endCursor\n      }\n      edges {\n        cursor\n        node {\n          ...PlaylistMinimal\n        }\n      }\n    }\n  }\n  \n"): (typeof documents)["\n  query SearchPlaylists(\n    $id: BigInt!\n    $search: String\n    $order: [playlistOrderBy!]\n    $first: Int!\n    $after: Cursor!\n  ) {\n    playlistCollection(\n      filter: { title: { iregex: $search } }\n      orderBy: $order\n      first: $first\n      after: $after\n    ) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        endCursor\n      }\n      edges {\n        cursor\n        node {\n          ...PlaylistMinimal\n        }\n      }\n    }\n  }\n  \n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query SearchUsers($filter: userFilter!, $first: Int!, $after: Cursor!) {\n    userCollection(filter: $filter, first: $first, after: $after) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        endCursor\n      }\n      edges {\n        cursor\n        node {\n          ...User\n        }\n      }\n    }\n  }\n  \n"): (typeof documents)["\n  query SearchUsers($filter: userFilter!, $first: Int!, $after: Cursor!) {\n    userCollection(filter: $filter, first: $first, after: $after) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        endCursor\n      }\n      edges {\n        cursor\n        node {\n          ...User\n        }\n      }\n    }\n  }\n  \n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetUserFriends($user_id: UUID!) {\n    user_friendCollection(filter: { user_id: { eq: $user_id } }) {\n      edges {\n        node {\n          friend_id\n          friend: user {\n            ...UserMinimal\n          }\n        }\n      }\n    }\n  }\n  \n"): (typeof documents)["\n  query GetUserFriends($user_id: UUID!) {\n    user_friendCollection(filter: { user_id: { eq: $user_id } }) {\n      edges {\n        node {\n          friend_id\n          friend: user {\n            ...UserMinimal\n          }\n        }\n      }\n    }\n  }\n  \n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment UserMovieActivity on user_movie_activity {\n    id\n    created_at\n    updated_at\n    user_id\n    user {\n      ...User\n    }\n    is_liked\n    rating\n    date\n    movie_id\n    movie: tmdb_movie {\n      ...TmdbMovieMinimal\n    }\n    review: user_movie_review {\n      ...UserMovieReview\n    }\n  }\n  \n  \n  \n"): (typeof documents)["\n  fragment UserMovieActivity on user_movie_activity {\n    id\n    created_at\n    updated_at\n    user_id\n    user {\n      ...User\n    }\n    is_liked\n    rating\n    date\n    movie_id\n    movie: tmdb_movie {\n      ...TmdbMovieMinimal\n    }\n    review: user_movie_review {\n      ...UserMovieReview\n    }\n  }\n  \n  \n  \n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment UserMovieActivityMinimal on user_movie_activity {\n    id\n    created_at\n    updated_at\n    user_id\n    user {\n      ...User\n    }\n    is_liked\n    rating\n    date\n    movie_id\n    review: user_movie_review {\n      id\n    }\n  }\n  \n  \n"): (typeof documents)["\n  fragment UserMovieActivityMinimal on user_movie_activity {\n    id\n    created_at\n    updated_at\n    user_id\n    user {\n      ...User\n    }\n    is_liked\n    rating\n    date\n    movie_id\n    review: user_movie_review {\n      id\n    }\n  }\n  \n  \n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation DeleteUserMovieActivity($movie_id: BigInt!, $user_id: UUID!) {\n    deleteFromuser_movie_activityCollection(\n      filter: { movie_id: { eq: $movie_id }, user_id: { eq: $user_id } }\n    ) {\n      records {\n        ...UserMovieActivityMinimal\n      }\n    }\n  }\n  \n"): (typeof documents)["\n  mutation DeleteUserMovieActivity($movie_id: BigInt!, $user_id: UUID!) {\n    deleteFromuser_movie_activityCollection(\n      filter: { movie_id: { eq: $movie_id }, user_id: { eq: $user_id } }\n    ) {\n      records {\n        ...UserMovieActivityMinimal\n      }\n    }\n  }\n  \n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation InsertUserMovieActivity(\n    $movie_id: BigInt!\n    $user_id: UUID!\n    $is_liked: Boolean\n    $rating: Int\n    $date: Datetime\n  ) {\n    insertIntouser_movie_activityCollection(\n      objects: {\n        movie_id: $movie_id\n        user_id: $user_id\n        is_liked: $is_liked\n        rating: $rating\n        date: $date\n      }\n    ) {\n      records {\n        ...UserMovieActivityMinimal\n      }\n    }\n  }\n  \n"): (typeof documents)["\n  mutation InsertUserMovieActivity(\n    $movie_id: BigInt!\n    $user_id: UUID!\n    $is_liked: Boolean\n    $rating: Int\n    $date: Datetime\n  ) {\n    insertIntouser_movie_activityCollection(\n      objects: {\n        movie_id: $movie_id\n        user_id: $user_id\n        is_liked: $is_liked\n        rating: $rating\n        date: $date\n      }\n    ) {\n      records {\n        ...UserMovieActivityMinimal\n      }\n    }\n  }\n  \n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation UpdateUserMovieActivity(\n    $id: BigInt!\n    $movie_id: BigInt!\n    $user_id: UUID!\n    $is_liked: Boolean\n    $rating: Int\n    $date: Datetime\n  ) {\n    updateuser_movie_activityCollection(\n      filter: { id: { eq: $id } }\n      set: {\n        movie_id: $movie_id\n        user_id: $user_id\n        is_liked: $is_liked\n        rating: $rating\n        date: $date\n      }\n    ) {\n      records {\n        ...UserMovieActivityMinimal\n      }\n    }\n  }\n  \n"): (typeof documents)["\n  mutation UpdateUserMovieActivity(\n    $id: BigInt!\n    $movie_id: BigInt!\n    $user_id: UUID!\n    $is_liked: Boolean\n    $rating: Int\n    $date: Datetime\n  ) {\n    updateuser_movie_activityCollection(\n      filter: { id: { eq: $id } }\n      set: {\n        movie_id: $movie_id\n        user_id: $user_id\n        is_liked: $is_liked\n        rating: $rating\n        date: $date\n      }\n    ) {\n      records {\n        ...UserMovieActivityMinimal\n      }\n    }\n  }\n  \n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetUserMovieActivitiesByUserId(\n    $filter: user_movie_activityFilter,\n    $orderBy: [user_movie_activityOrderBy!],\n    $first: Int!,\n    $after: Cursor!\n    $locale: String!\n  ) {\n    user_movie_activityCollection(\n      filter: $filter\n      orderBy: $orderBy\n    ) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          ...UserMovieActivity\n        }\n      }\n    }\n  }\n  \n"): (typeof documents)["\n  query GetUserMovieActivitiesByUserId(\n    $filter: user_movie_activityFilter,\n    $orderBy: [user_movie_activityOrderBy!],\n    $first: Int!,\n    $after: Cursor!\n    $locale: String!\n  ) {\n    user_movie_activityCollection(\n      filter: $filter\n      orderBy: $orderBy\n    ) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          ...UserMovieActivity\n        }\n      }\n    }\n  }\n  \n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetUserMovieActivity($filter: user_movie_activityFilter, $orderBy: [user_movie_activityOrderBy!], $locale: String!) {\n    user_movie_activityCollection(\n      filter: $filter\n      orderBy: $orderBy\n    ) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          ...UserMovieActivity\n        }\n      }\n    }\n  }\n  \n"): (typeof documents)["\n  query GetUserMovieActivity($filter: user_movie_activityFilter, $orderBy: [user_movie_activityOrderBy!], $locale: String!) {\n    user_movie_activityCollection(\n      filter: $filter\n      orderBy: $orderBy\n    ) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          ...UserMovieActivity\n        }\n      }\n    }\n  }\n  \n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetUserMovieActivityByMovieId($user_id: UUID!, $movie_id: BigInt!) {\n    user_movie_activityCollection(\n      filter: { user_id: { eq: $user_id }, movie_id: { eq: $movie_id } }\n    ) {\n      edges {\n        node {\n          ...UserMovieActivityMinimal\n        }\n      }\n    }\n  }\n  \n"): (typeof documents)["\n  query GetUserMovieActivityByMovieId($user_id: UUID!, $movie_id: BigInt!) {\n    user_movie_activityCollection(\n      filter: { user_id: { eq: $user_id }, movie_id: { eq: $movie_id } }\n    ) {\n      edges {\n        node {\n          ...UserMovieActivityMinimal\n        }\n      }\n    }\n  }\n  \n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment UserMovieGuidelist on user_movie_guidelist {\n    id\n    created_at\n    movie_id\n    movie: tmdb_movie {\n      ...TmdbMovieMinimal\n    }\n    comment\n    sender_user: user {\n      ...User\n    }\n  }\n  \n  \n"): (typeof documents)["\n  fragment UserMovieGuidelist on user_movie_guidelist {\n    id\n    created_at\n    movie_id\n    movie: tmdb_movie {\n      ...TmdbMovieMinimal\n    }\n    comment\n    sender_user: user {\n      ...User\n    }\n  }\n  \n  \n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation DeleteUserMovieGuidelist($id: BigInt!, $locale: String!) {\n    deleteFromuser_movie_guidelistCollection(filter: { id: { eq: $id } }) {\n      records {\n        ...UserMovieGuidelist\n      }\n    }\n  }\n  \n"): (typeof documents)["\n  mutation DeleteUserMovieGuidelist($id: BigInt!, $locale: String!) {\n    deleteFromuser_movie_guidelistCollection(filter: { id: { eq: $id } }) {\n      records {\n        ...UserMovieGuidelist\n      }\n    }\n  }\n  \n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation InsertUserMovieGuidelist(\n    $movie_id: BigInt!\n    $receiver_user_id: UUID!\n    $sender_user_id: UUID!\n    $comment: String\n    $locale: String!\n  ) {\n    insertIntouser_movie_guidelistCollection(\n      objects: {\n        movie_id: $movie_id\n        receiver_user_id: $receiver_user_id\n        sender_user_id: $sender_user_id\n        comment: $comment\n      }\n    ) {\n      records {\n        ...UserMovieGuidelist\n      }\n    }\n  }\n  \n"): (typeof documents)["\n  mutation InsertUserMovieGuidelist(\n    $movie_id: BigInt!\n    $receiver_user_id: UUID!\n    $sender_user_id: UUID!\n    $comment: String\n    $locale: String!\n  ) {\n    insertIntouser_movie_guidelistCollection(\n      objects: {\n        movie_id: $movie_id\n        receiver_user_id: $receiver_user_id\n        sender_user_id: $sender_user_id\n        comment: $comment\n      }\n    ) {\n      records {\n        ...UserMovieGuidelist\n      }\n    }\n  }\n  \n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetUserMovieGuidelistByUserId($user_id: UUID!, $locale: String!) {\n    user_movie_guidelistCollection(\n      filter: { receiver_user_id: { eq: $user_id } }\n    ) {\n      edges {\n        node {\n          ...UserMovieGuidelist\n        }\n      }\n    }\n  }\n  \n"): (typeof documents)["\n  query GetUserMovieGuidelistByUserId($user_id: UUID!, $locale: String!) {\n    user_movie_guidelistCollection(\n      filter: { receiver_user_id: { eq: $user_id } }\n    ) {\n      edges {\n        node {\n          ...UserMovieGuidelist\n        }\n      }\n    }\n  }\n  \n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation DeleteReview($id: BigInt!) {\n    deleteFromuser_movie_reviewCollection(filter: { id: { eq: $id } }) {\n      records {\n        ...UserMovieReview\n      }\n    }\n  }\n  \n"): (typeof documents)["\n  mutation DeleteReview($id: BigInt!) {\n    deleteFromuser_movie_reviewCollection(filter: { id: { eq: $id } }) {\n      records {\n        ...UserMovieReview\n      }\n    }\n  }\n  \n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation InsertReview(\n    $movie_id: BigInt!\n    $user_id: UUID!\n    $title: String!\n    $body: String!\n  ) {\n    insertIntouser_movie_reviewCollection(\n      objects: {\n        movie_id: $movie_id\n        user_id: $user_id\n        title: $title\n        body: $body\n      }\n    ) {\n      records {\n        ...UserMovieReview\n      }\n    }\n  }\n  \n"): (typeof documents)["\n  mutation InsertReview(\n    $movie_id: BigInt!\n    $user_id: UUID!\n    $title: String!\n    $body: String!\n  ) {\n    insertIntouser_movie_reviewCollection(\n      objects: {\n        movie_id: $movie_id\n        user_id: $user_id\n        title: $title\n        body: $body\n      }\n    ) {\n      records {\n        ...UserMovieReview\n      }\n    }\n  }\n  \n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation UpdateReview($id: BigInt!, $title: String!, $body: String!) {\n    updateuser_movie_reviewCollection(\n      filter: { id: { eq: $id } }\n      set: { title: $title, body: $body }\n    ) {\n      records {\n        ...UserMovieReview\n      }\n    }\n  }\n  \n"): (typeof documents)["\n  mutation UpdateReview($id: BigInt!, $title: String!, $body: String!) {\n    updateuser_movie_reviewCollection(\n      filter: { id: { eq: $id } }\n      set: { title: $title, body: $body }\n    ) {\n      records {\n        ...UserMovieReview\n      }\n    }\n  }\n  \n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment UserMovieReview on user_movie_review {\n    id\n    created_at\n    updated_at\n    user_id\n    user {\n      ...UserMinimal\n    }\n    movie_id\n    title\n    body\n    likes_count\n    comments_count\n    views_count\n  }\n  \n"): (typeof documents)["\n  fragment UserMovieReview on user_movie_review {\n    id\n    created_at\n    updated_at\n    user_id\n    user {\n      ...UserMinimal\n    }\n    movie_id\n    title\n    body\n    likes_count\n    comments_count\n    views_count\n  }\n  \n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n\tquery GetUserMovieReview(\n\t\t$filter: user_movie_reviewFilter!\n\t) {\n\t\tuser_movie_reviewCollection {\n\t\t\tedges {\n\t\t\t\tnode {\n\t\t\t\t\t...UserMovieReview\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n"): (typeof documents)["\n\tquery GetUserMovieReview(\n\t\t$filter: user_movie_reviewFilter!\n\t) {\n\t\tuser_movie_reviewCollection {\n\t\t\tedges {\n\t\t\t\tnode {\n\t\t\t\t\t...UserMovieReview\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment UserMovieWatchlist on user_movie_watchlist {\n    id\n    created_at\n    user_id\n    movie_id\n    movie: tmdb_movie {\n      ...TmdbMovieMinimal\n    }\n  }\n  \n"): (typeof documents)["\n  fragment UserMovieWatchlist on user_movie_watchlist {\n    id\n    created_at\n    user_id\n    movie_id\n    movie: tmdb_movie {\n      ...TmdbMovieMinimal\n    }\n  }\n  \n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment UserMovieWatchlistMinimal on user_movie_watchlist {\n    id\n    created_at\n    user_id\n    movie_id\n  }\n"): (typeof documents)["\n  fragment UserMovieWatchlistMinimal on user_movie_watchlist {\n    id\n    created_at\n    user_id\n    movie_id\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation DeleteUserMovieWatchlist($movie_id: BigInt!, $user_id: UUID!) {\n    deleteFromuser_movie_watchlistCollection(\n      filter: { movie_id: { eq: $movie_id }, user_id: { eq: $user_id } }\n    ) {\n      records {\n        ...UserMovieWatchlistMinimal\n      }\n    }\n  }\n  \n"): (typeof documents)["\n  mutation DeleteUserMovieWatchlist($movie_id: BigInt!, $user_id: UUID!) {\n    deleteFromuser_movie_watchlistCollection(\n      filter: { movie_id: { eq: $movie_id }, user_id: { eq: $user_id } }\n    ) {\n      records {\n        ...UserMovieWatchlistMinimal\n      }\n    }\n  }\n  \n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation InsertUserMovieWatchlist($movie_id: BigInt!, $user_id: UUID!) {\n    insertIntouser_movie_watchlistCollection(\n      objects: { movie_id: $movie_id, user_id: $user_id }\n    ) {\n      records {\n        ...UserMovieWatchlistMinimal\n      }\n    }\n  }\n  \n"): (typeof documents)["\n  mutation InsertUserMovieWatchlist($movie_id: BigInt!, $user_id: UUID!) {\n    insertIntouser_movie_watchlistCollection(\n      objects: { movie_id: $movie_id, user_id: $user_id }\n    ) {\n      records {\n        ...UserMovieWatchlistMinimal\n      }\n    }\n  }\n  \n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetUserMovieWatchlistByMovieId($user_id: UUID!, $movie_id: BigInt!) {\n    user_movie_watchlistCollection(\n      filter: { user_id: { eq: $user_id }, movie_id: { eq: $movie_id } }\n    ) {\n      edges {\n        node {\n          ...UserMovieWatchlistMinimal\n        }\n      }\n    }\n  }\n  \n"): (typeof documents)["\n  query GetUserMovieWatchlistByMovieId($user_id: UUID!, $movie_id: BigInt!) {\n    user_movie_watchlistCollection(\n      filter: { user_id: { eq: $user_id }, movie_id: { eq: $movie_id } }\n    ) {\n      edges {\n        node {\n          ...UserMovieWatchlistMinimal\n        }\n      }\n    }\n  }\n  \n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetUserMovieWatchlistByUserId($user_id: UUID!, $locale: String!) {\n    user_movie_watchlistCollection(\n      filter: {\n        user_id: { eq: $user_id }\n      }\n    ) {\n      edges {\n        node {\n          ...UserMovieWatchlist\n        }\n      }\n    }\n  }\n  \n"): (typeof documents)["\n  query GetUserMovieWatchlistByUserId($user_id: UUID!, $locale: String!) {\n    user_movie_watchlistCollection(\n      filter: {\n        user_id: { eq: $user_id }\n      }\n    ) {\n      edges {\n        node {\n          ...UserMovieWatchlist\n        }\n      }\n    }\n  }\n  \n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment Subscription on subscriptions {\n    id\n    user_id\n    status\n    prices {\n      ...Price\n    }\n  }\n  \n"): (typeof documents)["\n  fragment Subscription on subscriptions {\n    id\n    user_id\n    status\n    prices {\n      ...Price\n    }\n  }\n  \n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment User on user {\n    id\n    updated_at\n    username\n    username_updated_at\n    full_name\n    bio\n    avatar_url\n    background_url\n    website\n    language\n    favorite_color\n    followers_count\n    following_count\n    friends_count\n    subscriptions: subscriptionsCollection(filter: { status: { eq: active } }) {\n      edges {\n        node {\n          ...Subscription\n        }\n      }\n    }\n  }\n  \n"): (typeof documents)["\n  fragment User on user {\n    id\n    updated_at\n    username\n    username_updated_at\n    full_name\n    bio\n    avatar_url\n    background_url\n    website\n    language\n    favorite_color\n    followers_count\n    following_count\n    friends_count\n    subscriptions: subscriptionsCollection(filter: { status: { eq: active } }) {\n      edges {\n        node {\n          ...Subscription\n        }\n      }\n    }\n  }\n  \n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment UserMinimal on user {\n    id\n    username\n    full_name\n    bio\n    avatar_url\n    background_url\n    language\n    subscriptions: subscriptionsCollection(filter: { status: { eq: active } }) {\n      edges {\n        node {\n          ...Subscription\n        }\n      }\n    }\n  }\n  \n"): (typeof documents)["\n  fragment UserMinimal on user {\n    id\n    username\n    full_name\n    bio\n    avatar_url\n    background_url\n    language\n    subscriptions: subscriptionsCollection(filter: { status: { eq: active } }) {\n      edges {\n        node {\n          ...Subscription\n        }\n      }\n    }\n  }\n  \n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetUserById($userId: UUID!) {\n    userCollection(filter: { id: { eq: $userId } }, last: 1) {\n      edges {\n        user: node {\n          ...User\n        }\n      }\n    }\n  }\n  \n"): (typeof documents)["\n  query GetUserById($userId: UUID!) {\n    userCollection(filter: { id: { eq: $userId } }, last: 1) {\n      edges {\n        user: node {\n          ...User\n        }\n      }\n    }\n  }\n  \n"];

export function gql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;